x2 <- x[order(x[,'points'], decreasing=TRUE),]
# determine the row indeces for each position
k.ix <- which(x2[,'pos']=='k')
qb.ix <- which(x2[,'pos']=='qb')
rb.ix <- which(x2[,'pos']=='rb')
te.ix <- which(x2[,'pos']=='te')
wr.ix <- which(x2[,'pos']=='wr')
# no. of player in the team required
#nTeams = 12
#cap = 200
qb = as.numeric(posReq["qb"])
rb = as.numeric(posReq["rb"])
wr = as.numeric(posReq["wr"])
te = as.numeric(posReq["te"])
k = as.numeric(posReq["k"])
# calculate marginal points by subtracting "baseline" player's points
if (k > 0)
{x2[k.ix, 'marg'] <- x2[k.ix,'points'] - x2[k.ix[nTeams*k],'points']}
else
{x2[k.ix, 'marg'] <- -1}
# x2[k.ix, 'marg'] <- x2[k.ix,'points'] - x2[k.ix[nTeams*k],'points']
x2[qb.ix, 'marg'] <- x2[qb.ix,'points'] - x2[qb.ix[nTeams*qb],'points']
x2[rb.ix, 'marg'] <- x2[rb.ix,'points'] - x2[rb.ix[nTeams*rb],'points']
x2[te.ix, 'marg'] <- x2[te.ix,'points'] - x2[te.ix[nTeams*te],'points']
x2[wr.ix, 'marg'] <- x2[wr.ix,'points'] - x2[wr.ix[nTeams*wr],'points']
# create a new data.frame subset by non-negative marginal points
x3 <- x2[x2[,'marg'] >= 0,]
# re-order by marginal points
x3 <- x3[order(x3[,'marg'], decreasing=TRUE),]
# reset the row names
rownames(x3) <- NULL
# calculation for player value
x3[,'value'] <- x3[,'marg']*(nTeams*cap-nrow(x))/sum(x3[,'marg']) + 1
# create a data.frame with more interesting columns
player.each.team <- qb + rb + wr + te + k
x4 <- x3[, c('PlayerName','pos','points','value')]
write.csv(file, x=x4)
}
x3 <- ffvalues("~/Documents/BIOS301/football-values/", 'qbheavy.csv', posReq=c(qb=2, rb=2, wr=3, te=1, k=0),
points=c(fg=0, xpt=0, pass_yds=1/25, pass_tds=6, pass_ints=-2,
rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6))
x3 <- ffvalues("~/Documents/BIOS301/football-values/", 'qbheavy.csv', nTeams =12, cap = 200, posReq=c(qb=2, rb=2, wr=3, te=1, k=0),
points=c(fg=0, xpt=0, pass_yds=1/25, pass_tds=6, pass_ints=-2,
rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6))
test <- data.frame (read.csv("qbheavy.csv"))
test
# for those indicator value where death time is within 1 year of initial visit keeping that one and the ones more than one year are changed to 0
# i.e. only for common cell it overwrites the value written by the previous two if statements
ffvalues <- function(path, file, nTeams, cap, posReq=c(qb, rb, wr, te, k),
points=c(fg, xpt, pass_yds, pass_tds, pass_ints,
rush_yds, rush_tds, fumbles, rec_yds, rec_tds))
{
# finding current path
current_path = getwd()
# setting path where data files are present
setwd(file.path(path))
# Reading data files
k <- read.table('proj_k14.csv', header=TRUE, stringsAsFactors=FALSE)
qb <- read.table('proj_qb14.csv', header=TRUE, stringsAsFactors=FALSE)
rb <- read.table('proj_rb14.csv', header=TRUE, stringsAsFactors=FALSE)
te <- read.table('proj_te14.csv', header=TRUE, stringsAsFactors=FALSE)
wr <- read.table('proj_wr14.csv', header=TRUE, stringsAsFactors=FALSE)
# shifting back to working directory
setwd(current_path)
# generate unique list of column names
cols <- unique(c(names(k), names(qb), names(rb), names(te), names(wr)))
# create a new column in each data.frame with playing position type
k[,'pos'] <- 'k'
qb[,'pos'] <- 'qb'
rb[,'pos'] <- 'rb'
te[,'pos'] <- 'te'
wr[,'pos'] <- 'wr'
# append 'pos' to unique column list
cols <- c(cols, 'pos')
# create common columns in each data.frame
# initialize values to zero
k[,setdiff(cols, names(k))] <- 0
qb[,setdiff(cols, names(qb))] <- 0
rb[,setdiff(cols, names(rb))] <- 0
te[,setdiff(cols, names(te))] <- 0
wr[,setdiff(cols, names(wr))] <- 0
# combine data.frames by row, using consistent column order
x <- rbind(k[,cols], qb[,cols], rb[,cols], te[,cols], wr[,cols])
# rename column names, by removing periods
names(x) <- gsub('[.]', '', names(x))
# points supplied as a parameter to the function right now assumed as variable
fg = as.numeric(points["fg"])
xpt = as.numeric(points["xpt"])
pass_yds = as.numeric(points["pass_yds"])
pass_tds = as.numeric(points["pass_tds"])
pass_ints = as.numeric(points["pass_ints"])
rush_yds = as.numeric(points["rush_yds"])
rush_tds = as.numeric(points["rush_tds"])
fumbles = as.numeric(points["fumbles"])
rec_yds = as.numeric(points["rec_yds"])
rec_tds = as.numeric(points["rec_tds"])
# convert NFL stat to fantasy points
x[,'p_fg'] <- x[,'fg']*fg
x[,'p_xpt'] <- x[,'xpt']*xpt
x[,'p_pass_yds'] <- x[,'pass_yds']*pass_yds
x[,'p_pass_tds'] <- x[,'pass_tds']*pass_tds
x[,'p_pass_ints'] <- x[,'pass_ints']*pass_ints
x[,'p_rush_yds'] <- x[,'rush_yds']*rush_yds
x[,'p_rush_tds'] <- x[,'rush_tds']*rush_tds
x[,'p_fumbles'] <- x[,'fumbles']*fumbles
x[,'p_rec_yds'] <- x[,'rec_yds']*rec_yds
x[,'p_rec_tds'] <- x[,'rec_tds']*rec_tds
# summing the points along the row
x[,'points'] <- rowSums(x[,grep("^p_", names(x))])
# setting up the points column in decreasing order
x2 <- x[order(x[,'points'], decreasing=TRUE),]
# determine the row indices for each position
k.ix <- which(x2[,'pos']=='k')
qb.ix <- which(x2[,'pos']=='qb')
rb.ix <- which(x2[,'pos']=='rb')
te.ix <- which(x2[,'pos']=='te')
wr.ix <- which(x2[,'pos']=='wr')
# no. of player in the team required given as parameter to function
qb = as.numeric(posReq["qb"])
rb = as.numeric(posReq["rb"])
wr = as.numeric(posReq["wr"])
te = as.numeric(posReq["te"])
k = as.numeric(posReq["k"])
# calculate marginal points by subtracting "baseline" player's points
# in case number of k required in the team is 0
if (k > 0)
{x2[k.ix, 'marg'] <- x2[k.ix,'points'] - x2[k.ix[nTeams*k],'points']}
else
{x2[k.ix, 'marg'] <- -1}
x2[qb.ix, 'marg'] <- x2[qb.ix,'points'] - x2[qb.ix[nTeams*qb],'points']
x2[rb.ix, 'marg'] <- x2[rb.ix,'points'] - x2[rb.ix[nTeams*rb],'points']
x2[te.ix, 'marg'] <- x2[te.ix,'points'] - x2[te.ix[nTeams*te],'points']
x2[wr.ix, 'marg'] <- x2[wr.ix,'points'] - x2[wr.ix[nTeams*wr],'points']
# create a new data.frame subset by non-negative marginal points
x3 <- x2[x2[,'marg'] >= 0,]
# re-order by marginal points
x3 <- x3[order(x3[,'marg'], decreasing=TRUE),]
# reset the row names
rownames(x3) <- NULL
# calculation for player value
x3[,'value'] <- x3[,'marg']*(nTeams*cap-nrow(x))/sum(x3[,'marg']) + 1
# create a data.frame with required columns needed in data.frame
player.each.team <- qb + rb + wr + te + k
x4 <- x3[1:(nTeams*player.each.team), c('PlayerName','pos','points','value')]
# writing to csv file as an output
write.csv(file, x=x4)
}
ffvalues("~/Documents/BIOS301/football-values/", file='outfile.csv', nTeams=12, cap=200, posReq=c(qb=1, rb=2, wr=3, te=1, k=1),points=c(fg=4, xpt=1, pass_yds=1/25, pass_tds=4, pass_ints=-2, rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6))
fvalues <- data.frame(read.csv("outfile.csv"))
players.above20 <- sum((fvalues[,'value']) > 20)
players.above20
rb_indices <- which(fvalues[,'pos']=='rb')
fvalues$PlayerName[rb_indices[15]]
fvalues[rb_indices[15]]$PlayerName
fvalues[rb_indices[15], 'PlayerName']
ffvalues("~/Documents/BIOS301/football-values/", file='16team.csv', nTeams=16, cap=150, posReq=c(qb=1, rb=2, wr=3, te=1, k=1),points=c(fg=4, xpt=1, pass_yds=1/25, pass_tds=4, pass_ints=-2, rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6))
fvalues1 <- data.frame(read.csv("16team.csv"))
players.above20 <- sum((fvalues1[,'value']) > 20)
players.above20
wr_indices <- which(fvalues[,'pos']=='wr')
wr.top40 <- sum(wr_indices < 40)
wr.top40
x3 <- ffvalues('"~/Documents/BIOS301/football-values/"', 'qbheavy.csv',
nTeams = 12, cap = 200, posReq=c(qb=2, rb=2, wr=3, te=1, k=0),
points=c(fg=0, xpt=0, pass_yds=1/25, pass_tds=6, pass_ints=-2,
rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6))
ffvalues('"~/Documents/BIOS301/football-values/"', 'qbheavy.csv',
nTeams = 12, cap = 200, posReq=c(qb=2, rb=2, wr=3, te=1, k=0),
points=c(fg=0, xpt=0, pass_yds=1/25, pass_tds=6, pass_ints=-2,
rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6))
ffvalues("~/Documents/BIOS301/football-values/", 'qbheavy.csv',
nTeams = 12, cap = 200, posReq=c(qb=2, rb=2, wr=3, te=1, k=0),
points=c(fg=0, xpt=0, pass_yds=1/25, pass_tds=6, pass_ints=-2,
rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6))
fvalues2 <- data.frame(read.csv("qbheavy.csv"))
players.above20 <- sum((fvalues2[,'value']) > 20)
players.above20
qb_indices <- which(fvalues[,'pos']=='qb')
qb.top30 <- sum(qb_indices < 30)
qb.top30
fvalues2
qb_indices <- which(fvalues2[,'pos']=='qb')
qb.top30 <- sum(qb_indices < 30)
qb.top30
wr_indices <- which(fvalues1[,'pos']=='wr')
wr.top40 <- sum(wr_indices < 40)
wr.top40
```{r}
haart <- read.csv("haart.csv")
haart$init.date <- as.Date(haart$init.date, format="%m/%d/%y")
haart$last.visit <- as.Date(haart$last.visit, format="%m/%d/%y")
haart$date.death <- as.Date(haart$date.death, format="%m/%d/%y")
# need to check for the indicator only for those who are dead
# i.e. equating indicator column to death column
haart$indicator <- haart$death
# finding number of rows
i_max <- length(haart$death)
for (i in 1:i_max)
{
# only if default indicator value is 1 as it is by default
# equated to the death column
if (haart$indicator[i] == 1)
{
# for those indicator value where death time is within 1 year of initial visit
# keeping that one and the ones more than one year are changed to 0
if (difftime(haart$date.death[i], haart$init.date[i], units="days") < 365)
{
haart$indicator[i] = 1
}
else
{
haart$indicator[i] = 0
}
}
}
haart$follow.up <- NA
time1 <- c()
time2 <- c()
i_max <- length(haart$death)
for (i in 1:i_max)
{
# column matrix to store time difference between last & initial visit for each row
time1[i] <- difftime (haart$last.visit[i], haart$init.date[i], units="days")
# checking for column not having NA values
if (!is.na(time1[i]))
{
# changing the cell value to NA where time difference was more than an year
if (time1[i] > 365)
{
time1[i] = NA
}
}
# col matrix to store time diff between date of death & initial visit for each row
time2[i] <- difftime (haart$date.death[i], haart$init.date[i], units="days")
# checking for column not having NA values
if (!is.na(time2[i]))
{
# changing the cell value to NA where time difference was more than an year
if (time2[i] > 365)
{
time2[i] = NA
}
}
}
# creating a new column matrix storing the difference between time1 and time2
# so only those row will have values for which time1 and time2 value exist
# i.e. it is not NA and it means that both are less than year and we need to
# find the one which is earliest or smaller difference
time12 <- (time1 - time2)
for (i in 1:1000)
{
# if row entry is a number and not NA
if (!is.na(time1[i]))
# if time difference is less than an year
{if (time1[i] < 365){haart$follow.up[i] = time1[i]}}
# if row entry is a number and not NA
if (!is.na(time2[i]))
# if time difference is less than an year
{if (time2[i] < 365){haart$follow.up[i] = time2[i]}}
# for those rows which has values for both time1 and time2 and is less than
# an year either time1 and time2 whichever has lower value replaces the cell
# with correct entry i.e. only for common cell it overwrites the value
# written by the previous two if statements
if (!is.na(time12[i]))
{
if (time12[i] < 0)
{haart$follow.up[i] = time1[i]}
else
{haart$follow.up[i] = time2[i]}
}
}
# assuming that loss of follow up to all entries
haart$loss.follow.up <- 1
i_max <- length(haart$death)
for (i in 1:i_max)
{
# for those entry for which follow up time is less than an year which
# is already stored in follow.up column in the previous case the loss
# of follow up is 0 rest it means their status was unknown after an year
if (!is.na(haart$follow.up[i]))
{haart$loss.follow.up[i] = 0}
}
View(haart)
haart.split <- data.frame(t(sapply(haart[,'init.reg'], function(y) strsplit(y,split=",")[[1]])))
haart.split <- data.frame(t(sapply(as.character(haart[,'init.reg']), function(y) strsplit(y,split=",")[[1]])))
haart.split
View(haart.split)
selectReadDepth <- apply((as.character(haart[,'init.reg']),2,function(x) sapply(x, function(y) strsplit(y,split=":")[[1]][3]))
selectReadDepth <- apply((as.character(haart[,'init.reg'])),2,function(x) sapply(x, function(y) strsplit(y,split=":")[[1]][3]))
haart.split <- data.frame(t(sapply((as.character(haart[,'init.reg'])), function(y) strsplit(y,split=",")[[1]][3])))
selectReadDepth <- apply((as.character(haart[,'init.reg']),2,function(x) sapply(x, function(y) strsplit(y,split=":")[[1]][3]))
haart.split <- data.frame(t(sapply((as.character(haart[,'init.reg'])), function(y) strsplit(y,split=",")[[1]][3])))
View(haart.split)
haart.split <- data.frame(t(sapply((as.character(haart[,'init.reg'])), function(y) strsplit(y,split=",")[[1]])))
View(haart.split)
haart.split2 <- cbind(haart[,'init.reg'],haart.split)
View(haart.split2)
View(haart.split)
View(haart.split2)
haart.split2 <- strsplit(as.character(haart$init.reg), ',')
View(haart.split)
haart.split2
haart.split2[1000,]
haart.split2[1000]
haart.split2[1000,1]
unlist(haart.split2)
unlist(haart.split2(1))
haart.split <- strsplit(as.character(haart$init.reg), ',')
unlist(haart.split(1))
unlist(haart.split[1])
test <- unlist(haart.split[1])
test
test[3]
haart.split[2,2]
names(haart)
c(unlist(haart.split))
data.frame(unlist(haart.split))
reg.test <- c()
dim(reg.test) <- c(1000,4)
reg.test[1,] = unlist(haart.split[1])
reg.test[1,] = unlist(haart.split[1])
reg.test[1] = unlist(haart.split[1])
reg.test = unlist(haart.split[1])
reg.test
reg.test <- c()
reg = unlist(haart.split[1])
reg
reg.test[1,] = reg
dim <- length(reg)
dim
for (i in 1:dim)
{}
for (i in 1:dim)
{}
for (i in 1:dim)
{reg.test[1,i]=reg[i]}
t <- read.table(haart = haart, sep = ",", colClasses = "character")
library(stringr)
test <- str_split_fixed(haart$init.reg, ",", 3)
test
test <- as.numeric(str_split_fixed(haart$init.reg, ",", 3))
test <- (str_split_fixed(haart$init.reg, ",", 3))
test <- as.numeric(test)
test
test <- (str_split_fixed(haart$init.reg, ",", 3))
test
test[1000,1]
library(stringr)
haart.split <- (str_split_fixed(haart$init.reg, ",", 3))
test <- (str_split_fixed(haart$init.reg, ",", 3))
names(test)
names(haart.split)
haart.split2 <- str_split_fixed(haart.split, ",", 2)
haart.split2
haart.split2 <- str_split_fixed(haart.split[,3], ",", 2)
haart.split2
library(stringr)
# Splitting the first three rows into separate columns
haart.split <- (str_split_fixed(haart$init.reg, ",", 3))
# Splitting the last column some of which might have to be separated
haart.split2 <- str_split_fixed(haart.split[,3], ",", 2)
# combining to haart
haart$init.reg1 <- haart.split[,1]
haart$init.reg2 <- haart.split[,2]
haart$init.reg3 <- haart.split2[,1]
haart$init.reg4 <- haart.split2[,2]
View(haart)
haart2 <- read.csv("haart2.csv")
View(haart2)
View(haart)
drop <- c('indicator','follow.up','loss.follow.up','init.reg1','init.reg2','init.reg3','init.reg4')
haart.test <- haart[,!(names(haart) %in% drops)]
keeps <- names(haart2)
keeps
haart[,keeps,drop=FALSE]
View(haart)
haart <- haart[,keeps,drop=FALSE]
View(haart)
View(haart2)
haart <- rbind(haart,haart2)
View(haart)
View(haart2)
# haart.csv file present in the working directory
haart <- read.csv("haart.csv")
haart$init.date <- as.Date(haart$init.date, format="%m/%d/%y")
haart$last.visit <- as.Date(haart$last.visit, format="%m/%d/%y")
haart$date.death <- as.Date(haart$date.death, format="%m/%d/%y")
# need to check for the indicator only for those who are dead
# i.e. equating indicator column to death column
haart$indicator <- haart$death
# finding number of rows
i_max <- length(haart$death)
for (i in 1:i_max)
{
# only if default indicator value is 1 as it is by default
# equated to the death column
if (haart$indicator[i] == 1)
{
# for those indicator value where death time is within 1 year of initial visit
# keeping that one and the ones more than one year are changed to 0
if (difftime(haart$date.death[i], haart$init.date[i], units="days") < 365)
{
haart$indicator[i] = 1
}
else
{
haart$indicator[i] = 0
}
}
}
haart$follow.up <- NA
time1 <- c()
time2 <- c()
i_max <- length(haart$death)
for (i in 1:i_max)
{
# column matrix to store time difference between last & initial visit for each row
time1[i] <- difftime (haart$last.visit[i], haart$init.date[i], units="days")
# checking for column not having NA values
if (!is.na(time1[i]))
{
# changing the cell value to NA where time difference was more than an year
if (time1[i] > 365)
{
time1[i] = NA
}
}
# col matrix to store time diff between date of death & initial visit for each row
time2[i] <- difftime (haart$date.death[i], haart$init.date[i], units="days")
# checking for column not having NA values
if (!is.na(time2[i]))
{
# changing the cell value to NA where time difference was more than an year
if (time2[i] > 365)
{
time2[i] = NA
}
}
}
# creating a new column matrix storing the difference between time1 and time2
# so only those row will have values for which time1 and time2 value exist
# i.e. it is not NA and it means that both are less than year and we need to
# find the one which is earliest or smaller difference
time12 <- (time1 - time2)
for (i in 1:1000)
{
# if row entry is a number and not NA
if (!is.na(time1[i]))
# if time difference is less than an year
{if (time1[i] < 365){haart$follow.up[i] = time1[i]}}
# if row entry is a number and not NA
if (!is.na(time2[i]))
# if time difference is less than an year
{if (time2[i] < 365){haart$follow.up[i] = time2[i]}}
# for those rows which has values for both time1 and time2 and is less than
# an year either time1 and time2 whichever has lower value replaces the cell
# with correct entry i.e. only for common cell it overwrites the value
# written by the previous two if statements
if (!is.na(time12[i]))
{
if (time12[i] < 0)
{haart$follow.up[i] = time1[i]}
else
{haart$follow.up[i] = time2[i]}
}
}
# assuming that loss of follow up to all entries
haart$loss.follow.up <- 1
i_max <- length(haart$death)
for (i in 1:i_max)
{
# for those entry for which follow up time is less than an year which
# is already stored in follow.up column in the previous case the loss
# of follow up is 0 rest it means their status was unknown after an year
if (!is.na(haart$follow.up[i]))
{haart$loss.follow.up[i] = 0}
}
library(stringr)
# Splitting the first three rows into separate columns
haart.split <- (str_split_fixed(haart$init.reg, ",", 3))
# Splitting the last column some of which might have to be separated
haart.split2 <- str_split_fixed(haart.split[,3], ",", 2)
# combining to haart
haart$init.reg1 <- haart.split[,1]
haart$init.reg2 <- haart.split[,2]
haart$init.reg3 <- haart.split2[,1]
haart$init.reg4 <- haart.split2[,2]
haart2 <- read.csv("haart2.csv")
haart2 <- read.csv("haart2.csv")
haart1 <- haart[,keeps,drop=FALSE]
haart <- rbind(haart,haart2)
haart1 <- haart2[,keeps,drop=FALSE]
View(haart1)
cols <- unique(c(names(haart), names(haart2)))
cols
haart3 <- cbind(haart2, cols)
haart2[,setdiff(cols, names(haart2))] <- NA
View(haart2)
haart1 <- rbind(haart,haart2)
View(haart1)
View(haart1)
View(haart1)
haart1 <- rbind(haart,haart2)
View(haart1)
haart1
haart <- rbind(haart,haart2)
View(haart)
haart2
cols <- names(haart)
haart2[,setdiff(cols, names(haart2))] <- NA
haart <- rbind(haart,haart2)
haart2
